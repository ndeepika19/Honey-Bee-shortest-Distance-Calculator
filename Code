import tkinter as tk
import math
import random
from operator import sub


def print_spiral(n):
    matrix = [[0 for x in range(n)] for y in range(n)]
    num = 1
    x, y = n // 2, n // 2
    matrix[x][y] = num

    # Define moves
    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]

    # Set initial move
    move = moves[0]

    # Set initial length
    length = 1

    # Set initial position
    pos = [x, y]

    while num < n * n:
        for i in range(2):
            for j in range(length):
                # Move to next position
                pos = [pos[0] + move[0], pos[1] + move[1]]
                x, y = pos

                # Check if position is valid and set number
                if x >= 0 and x < n and y >= 0 and y < n:
                    num += 1
                    matrix[x][y] = num

            # Rotate move
            move = moves[(moves.index(move) + 1) % 4]

        # Increase length
        length += 1

    # Return matrix
    return matrix


def is_spiral(first_num, last_num):
    if (first_num != 0 or last_num != 0) and (first_num and last_num <= 1000) and (first_num != last_num):
        return shortest_distance(first_num, last_num)



def shortest_distance(first_num: int, last_num: int, spiral=[[0, 0, 0] * 2]):
    transforms = ((1, 0, -1), (1, -1, 0), (0, -1, 1), (-1, 0, 1), (-1, 1, 0), (0, 1, -1))

    for i in range(max(first_num, last_num)):
        for index, values in enumerate(transforms):

            for k in range(i - (1 == index) * 1):
                spiral.append(list(map(sum, list(zip(spiral[-1], values)))))


    distance = max(list(map(abs, list(map(sub, *[spiral[last_num], spiral[first_num]])))))
    return distance - 1




def display_spiral():
    n = int(size_entry.get())
    matrix = print_spiral(n)

    # create a new window to display the spiral matrix
    matrix_window = tk.Toplevel(window)
    matrix_window.title("Spiral Matrix")

    # create a grid of labels to display the matrix
    for i in range(n):
        for j in range(n):
            # generate a random background color
            bg_color = '#{0:06x}'.format(random.randint(0, 256**3))

            # create a label with the number and the background color
            label = tk.Label(matrix_window, text=str(matrix[i][j]), width=7, height=3,
                             borderwidth=1, relief="solid", bg=bg_color)
            label.grid(row=i, column=j)


def calculate_distance():
    n1 = int(first_entry.get())
    n2 = int(last_entry.get())
    distance = is_spiral(n1, n2)
    if distance:
        result_label.config(text=f"Shortest distance of the two nodes is: {distance}")
    else:
        result_label.config(text="Invalid input. Please enter two different integers between 1 and 1000.")



window = tk.Tk()
window.title("Spiral Matrix and Shortest Distance Calculator")

# create the input fields and labels
size_label = tk.Label(window, text="Size of Spiral Matrix:")
size_entry = tk.Entry(window)

first_label = tk.Label(window, text="First Number:")
first_entry = tk.Entry(window)

last_label = tk.Label(window, text="Last Number:")
last_entry = tk.Entry(window)

# create the buttons to trigger the actions
display_button = tk.Button(window, text="Display Spiral Matrix", command=display_spiral)
calculate_button = tk.Button(window, text="Calculate Shortest Distance", command=calculate_distance)

# create a label to display the result
result_label = tk.Label(window)

# create a label to display if the matrix is a valid spiral
spiral_label = tk.Label(window)

# add the input fields, labels, buttons, and result label to the window
size_label.pack()
size_entry.pack()

first_label.pack()
first_entry.pack()

last_label.pack()
last_entry.pack()

display_button.pack()
calculate_button.pack()

result_label.pack()
spiral_label.pack()

window.mainloop()
